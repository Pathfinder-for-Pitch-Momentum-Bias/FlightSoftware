#include "master_helpers.hpp"
#include "../../state/device_states.hpp"

void Master::apply_uplink_constants(const Comms::Uplink& uplink) {
  std::array<unsigned int, {{num_constants}}> constant_ids {
    {% for x in range(num_constants) -%}
    uplink.constant_{{x}}_id,
    {% endfor -%}
  };
  std::array<unsigned int, {{num_constants}}> constant_vals {
    {% for x in range(num_constants) -%}
    uplink.constant_{{x}}_val,
    {% endfor -%}
  };
  for(int i = 0; i < constant_ids.size(); i++) {
    unsigned int const_id = constant_ids[i];
    if (const_id > Constants::changeable_constants_map.size()) continue;
    rwMtxWLock(&Constants::changeable_constants_lock);
      *(Constants::changeable_constants_map[const_id]) = constant_vals[i];
    rwMtxWUnlock(&Constants::changeable_constants_lock);
  }
}

void Master::apply_uplink_adcs_hat(const Comms::Uplink& uplink) {
  rwMtxWLock(&State::ADCS::adcs_state_lock);
    {% for device in uplink_fields_adcs_hat -%}
    State::ADCS::adcs_hat.at("{{device.device}}").error_ignored = uplink.{{device.uplink_field}};
    {% endfor -%}
  rwMtxWUnlock(&State::ADCS::adcs_state_lock);
}

void Master::apply_uplink_fc_hat(const Comms::Uplink& uplink) {
  rwMtxWLock(&State::Hardware::hardware_state_lock);
    {% for device in uplink_fields_fc_hat -%}
    State::Hardware::hat.at(&Devices::{{device.device}}()).error_ignored = uplink.{{device.uplink_field}};
    {% endfor -%}
  rwMtxWUnlock(&State::Hardware::hardware_state_lock);
}