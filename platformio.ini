[platformio]

#########################################################################
# Common compiler options for a Teensy target.
#########################################################################
[teensy_common]
platform = teensy
framework = arduino
lib_deps =
  https://github.com/pathfinder-for-autonomous-navigation/psim
  https://github.com/pathfinder-for-autonomous-navigation/CommonSoftware
build_flags = -std=c++14 -Werror -Wall -D UNITY_INCLUDE_DOUBLE -O3 -DLIN_RANDOM_SEED=358264
src_filter = +<FCCode/> +<teensy.cpp>
upload_protocol = teensy-cli
test_build_project_src = true

#########################################################################
# CLI Targets can be directly uploaded to a Teensy via a USB cable. 
#########################################################################
[teensy35_cli]
extends = teensy_common
board = teensy35

[teensy36_cli]
extends = teensy_common
board = teensy36

[teensy_hootl]
build_flags = ${teensy_common.build_flags} -D HOOTL

[env:teensy35_cli_hootl]
extends = teensy35_cli, teensy_hootl

[env:teensy36_cli_hootl]
extends = teensy36_cli, teensy_hootl

[env:teensy_cli_preflight]
extends = teensy36_cli
src_filter = ${teensy_common.src_filter} -<teensy.cpp> +<preflight_fc.cpp>

[env:teensy_cli_flight]
extends = teensy36_cli
build_flags = ${teensy_common.build_flags} -D FLIGHT

#########################################################################
# The native desktop and Teensy CI targets are used for running software-only unit tests.
#########################################################################

[native_common]
platform = native
lib_deps =
  https://github.com/pathfinder-for-autonomous-navigation/psim
;  https://github.com/pathfinder-for-autonomous-navigation/CommonSoftware
  file:///Users/tanishqaggarwal/Documents/pan/repositories/CommonSoftware
lib_archive = false
lib_compat_mode = off
test_build_project_src = true
test_filter = test_fsw_*
build_flags = -std=c++14 -Werror -Wall -D HOOTL -D UNITY_INCLUDE_DOUBLE -D DESKTOP -lpthread

; This target is used for debugging and testing purposes.
; - Can be debugged
; - Can run unit tests with it
; - Generates code coverage
[env:native_ci]
extends = native_common
build_flags = ${native_common.build_flags} -O0 -g --coverage
extra_scripts = get_code_coverage.py
src_filter = +<FCCode/> -<FCCode/main.cpp> +<native_dummy.cpp>

; This model of flight software is to be used in conjunction with psim.
; Run unit tests on this model as well, in order to verify that optimizations don't cause
; code failure.
[env:native]
extends = native_common
build_flags = ${native_common.build_flags} -O3
src_filter = +<FCCode/> -<FCCode/main.cpp> +<native.cpp>

; This environment is used by the CI tool to run software unit tests on Teensy.
; It may also be used manually.
[env:teensy_ci]
board = teensy35
platform = ${teensy_cli.platform}
framework = ${teensy_cli.framework}
lib_deps = ${teensy_cli.lib_deps}
build_flags = ${teensy_cli.build_flags} -D HOOTL -D UNITY_INCLUDE_DOUBLE
src_filter = +<teensy_stub.cpp>
upload_protocol = teensy-cli
test_filter = test_fsw_*

#########################################################################
# Hardware Testing Targets.
#########################################################################

[hardware_common]
build_flags = ${teensy_common.build_flags} -D PAN_LEADER
src_filter = +<teensy_stub.cpp>

##########
# Docking
##########
[env:teensy35_test_docking]
board = teensy36
platform = ${teensy_cli.platform}
framework = ${teensy_cli.framework}
lib_deps = ${teensy_cli.lib_deps}
build_flags = ${teensy_cli.build_flags} -D PAN_LEADER
src_filter = +<teensy_stub.cpp>
upload_protocol = teensy-cli
test_filter = test_docking

[env:teensy36_test_docking]
board = teensy36
platform = ${teensy_cli.platform}
framework = ${teensy_cli.framework}
lib_deps = ${teensy_cli.lib_deps}
build_flags = ${teensy_cli.build_flags} -D PAN_LEADER
src_filter = +<teensy_stub.cpp>
upload_protocol = teensy-cli
test_filter = test_docking

##########
# Propulsion
##########
[env:teensy35_test_propulsion]
board = teensy36
platform = ${teensy_cli.platform}
framework = ${teensy_cli.framework}
lib_deps = ${teensy_cli.lib_deps}
build_flags = ${teensy_cli.build_flags} -D PAN_LEADER
src_filter = +<teensy_stub.cpp>
upload_protocol = teensy-cli
test_filter = test_prop

[env:teensy36_test_propulsion]
board = teensy36
platform = ${teensy_cli.platform}
framework = ${teensy_cli.framework}
lib_deps = ${teensy_cli.lib_deps}
build_flags = ${teensy_cli.build_flags} -D PAN_LEADER
src_filter = +<teensy_stub.cpp>
upload_protocol = teensy-cli
test_filter = test_prop

##########
# ADCS
##########
[env:teensy35_test_adcs]
extends = teensy35_cli, hardware_common
src_filter = +<adcs_test.cpp>
test_ignore = *

[env:teensy36_test_adcs]
extends = teensy36_cli, hardware_common
src_filter = +<adcs_test.cpp>
test_ignore = *

##########
# Quake
##########
[env:teensy_36_test_quake_no_network]
extends = teensy35_cli, hardware_common
test_filter = test_quake_no_network

[env:teensy_36_test_quake_network]
extends = teensy36_cli, hardware_common
test_filter = test_quake_network

[env:teensy_36_test_quake]
extends = teensy36_cli, hardware_common
test_filter = test_quake

[env:teensy_35_test_quake_no_network]
extends = teensy35_cli, hardware_common
test_filter = test_quake_no_network

[env:teensy_35_test_quake_network]
extends = teensy36_cli, hardware_common
test_filter = test_quake_network

[env:teensy_35_test_quake]
extends = teensy35_cli, hardware_common
test_filter = test_quake
