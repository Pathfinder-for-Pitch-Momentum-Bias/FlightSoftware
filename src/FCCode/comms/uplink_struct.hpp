/** THIS IS AN AUTOGENERATED FILE **/
#ifndef UPLINK_STRUCT_HPP_
#define UPLINK_STRUCT_HPP_

#include <GPSTime.hpp>
#include <array>

namespace Comms {
  constexpr unsigned int UPLINK_SIZE_BITS = 540;
  struct Uplink {
    int uplink_number;
    gps_time_t uplink_timestamp;
    std::array<double, 3> other_satellite_position;
    gps_time_t other_satellite_position_timestamp;
    std::array<double, 3> other_satellite_velocity;
    gps_time_t other_satellite_velocity_timestamp;
    int constant_0_id;
    int constant_0_val;
    int constant_1_id;
    int constant_1_val;
    int constant_2_id;
    int constant_2_val;
    int master_state;
    int pan_state;
    bool is_follower;
    bool hat_gomspace_error_ignored;
    bool hat_piksi_error_ignored;
    bool hat_quake_error_ignored;
    bool hat_dcdc_error_ignored;
    bool hat_spike_and_hold_error_ignored;
    bool hat_adcs_system_error_ignored;
    bool hat_pressure_sensor_error_ignored;
    bool hat_temp_sensor_inner_error_ignored;
    bool hat_temp_sensor_outer_error_ignored;
    bool hat_docking_motor_error_ignored;
    bool hat_docking_switch_error_ignored;
    bool adcs_hat_gyroscope_is_functional;
    bool adcs_hat_magnetometer_is_functional;
    bool adcs_hat_magnetorquer_x_is_functional;
    bool adcs_hat_magnetorquer_y_is_functional;
    bool adcs_hat_magnetorquer_z_is_functional;
    bool adcs_hat_motorpot_is_functional;
    bool adcs_hat_motor_x_is_functional;
    bool adcs_hat_motor_y_is_functional;
    bool adcs_hat_motor_z_is_functional;
    bool adcs_hat_motor_x_adc_is_functional;
    bool adcs_hat_motor_y_adc_is_functional;
    bool adcs_hat_motor_z_adc_is_functional;
    bool adcs_hat_ssa_adc_1_is_functional;
    bool adcs_hat_ssa_adc_2_is_functional;
    bool adcs_hat_ssa_adc_3_is_functional;
    bool adcs_hat_ssa_adc_4_is_functional;
    bool adcs_hat_ssa_adc_5_is_functional;
    int adcs_state;
    bool command_adcs;
    int adcs_frame;
    std::array<float, 4> adcs_attitude;
    bool command_propulsion;
    std::array<float, 3> firing_vector;
    gps_time_t firing_time;
    bool docking_motor_mode;
    bool reset_piksi;
    bool reset_quake;
    bool power_cycle_gomspace;
    bool power_cycle_piksi;
    bool power_cycle_quake;
    bool power_cycle_dcdc;
    bool power_cycle_adcs_system;
  };
}
#endif