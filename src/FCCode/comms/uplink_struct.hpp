/** THIS IS AN AUTOGENERATED FILE **/
#ifndef UPLINK_STRUCT_HPP_
#define UPLINK_STRUCT_HPP_

#include <GPSTime.hpp>
#include <array>

namespace Comms {
  constexpr unsigned int UPLINK_SIZE_BITS = 556;
  struct Uplink {
    int uplink_number;
    gps_time_t uplink_timestamp;
    std::array<double, 3> other_satellite_position;
    std::array<double, 3> other_satellite_velocity;
    gps_time_t other_satellite_timestamp;
    int constant_0_id;
    int constant_0_val;
    int constant_1_id;
    int constant_1_val;
    int constant_2_id;
    int constant_2_val;
    int constant_3_id;
    int constant_3_val;
    int constant_4_id;
    int constant_4_val;
    int master_state;
    int pan_state;
    bool is_follower;
    bool fc_hat_gomspace;
    bool fc_hat_piksi;
    bool fc_hat_quake;
    bool fc_hat_dcdc;
    bool fc_hat_spike_and_hold;
    bool fc_hat_adcs_system;
    bool fc_hat_pressure_sensor;
    bool fc_hat_temp_sensor_inner;
    bool fc_hat_temp_sensor_outer;
    bool fc_hat_docking_motor;
    bool fc_hat_docking_switch;
    bool adcs_hat_gyroscope;
    bool adcs_hat_magnetometer;
    bool adcs_hat_magnetorquer_x;
    bool adcs_hat_magnetorquer_y;
    bool adcs_hat_magnetorquer_z;
    bool adcs_hat_motorpot;
    bool adcs_hat_motor_x;
    bool adcs_hat_motor_y;
    bool adcs_hat_motor_z;
    bool adcs_hat_motor_x_adc;
    bool adcs_hat_motor_y_adc;
    bool adcs_hat_motor_z_adc;
    bool adcs_hat_ssa_adc_1;
    bool adcs_hat_ssa_adc_2;
    bool adcs_hat_ssa_adc_3;
    bool adcs_hat_ssa_adc_4;
    bool adcs_hat_ssa_adc_5;
    int adcs_state;
    bool command_adcs;
    int adcs_frame;
    std::array<float, 4> adcs_attitude;
    bool command_propulsion;
    std::array<float, 3> firing_vector;
    gps_time_t firing_time;
    bool docking_motor_mode;
    bool reset_piksi;
    bool reset_quake;
    bool reset_dcdc;
    bool reset_spike_and_hold;
    bool power_cycle_gomspace;
    bool power_cycle_piksi;
    bool power_cycle_quake;
    bool power_cycle_adcs_system;
    bool power_cycle_spike_and_hold;
  };
}
#endif