import csv

with open('downlink_fields.csv') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    header = next(csv_reader)
    FIELDS = [dict(zip(header, map(str, row))) for row in csv_reader]

# Parse data from CSV into memory structures
history_fields = []
for field in FIELDS:
    if "history" in field["name"]:
        history_fields.append(field)
history_group_data = list(set([
    (field["group"][len("StateHistory::"):], field["group_nickname"])
    for field in history_fields]))
history_groups = [{"fqn" : grp, "nickname" : nick} for (grp, nick) in history_group_data]

# Generate definition for each circular buffer, based on namespace
definitions = {}
for group in history_groups:
    definitions[group["fqn"]] = []
    for field in history_fields:
        if not 'buf_size' in field:
            print "Field {0} has undefined size".format(field["name"])
        if field["group"] != "StateHistory::" + group["fqn"]:
            continue

        field_unqualified_name = field["name"][len(field["group"]) + 2:]

        if field["type"] == "float vector":
            definitions[group["fqn"]].append("circular_buffer<{0},{1}> {2};".format("std::array<float, 3>", field["buf_size"], field_unqualified_name))
        elif field["type"] == "double vector":
            definitions[group["fqn"]].append("circular_buffer<{0},{1}> {2};".format("std::array<double, 3>", field["buf_size"], field_unqualified_name))
        elif field["type"] == "quaternion":
            definitions[group["fqn"]].append("circular_buffer<{0},{1}> {2};".format("std::array<float, 4>", field["buf_size"], field_unqualified_name))
        elif field["type"] == "gps time":
            definitions[group["fqn"]].append("circular_buffer<{0},{1}> {2};".format("gps_time_t", field["buf_size"], field_unqualified_name))
        elif field["type"] == "temperature":
            definitions[group["fqn"]].append("circular_buffer<{0},{1}> {2};".format("int", field["buf_size"], field_unqualified_name))
        else:
            definitions[group["fqn"]].append("circular_buffer<{0},{1}> {2};".format(field["type"], field["buf_size"], field_unqualified_name))

# Construct code for rate file
rate_file = "/** THIS IS AN AUTOGENERATED FILE **/\n"
rate_file += "#ifndef STATE_HISTORY_RATES_HPP_\n"
rate_file += "#define STATE_HISTORY_RATES_HPP_\n\n"
rate_file += "namespace StateHistory {\n"
rate_file += "namespace Rates {\n"
rate_file += "constexpr unsigned int COLLECTION_PERIOD = 300000; // Collect five minutes worth of data in buffers\n"

for group in history_groups:
    namespace = "namespace {0} {{\n".format(group["fqn"])
    for field in history_fields:
        if field["group"] != "StateHistory::" + group["fqn"]:
            continue
        field_unqualified_name = field["name"][len(field["group"]) + 2:]
        namespace += "  constexpr unsigned int {0}_rate = COLLECTION_PERIOD / {1};\n".format(
            field_unqualified_name, field["buf_size"])
    namespace += "}\n"
    rate_file += namespace

rate_file += "}\n"
rate_file += "}\n\n"
rate_file += "#endif"
f = open("../../../state/state_history_rates.hpp", "w")
f.write(rate_file)
f.close()

# Construct code for header file
header_file = "/** THIS IS AN AUTOGENERATED FILE **/\n"
header_file += "#ifndef STATE_HISTORY_HOLDER_HPP_\n"
header_file += "#define STATE_HISTORY_HOLDER_HPP_\n\n"
header_file += "#include <circular_buffer.hpp>\n"
header_file += "#include <array>\n\n"
header_file += "#include <rwmutex.hpp>\n\n"
header_file += "namespace StateHistory {\n"

for group in history_groups:
    namespace = "namespace {0} {{\n".format(group["fqn"])
    for field in definitions[group["fqn"]]:
        namespace += "  extern {0}\n".format(field)
    namespace += "  extern rwmutex_t {0}_state_lock;\n".format(group["nickname"])
    namespace += "}\n"
    header_file += namespace

header_file += "}\n\n"
header_file += "#endif"
f = open("../../../state/state_history_holder.hpp", "w")
f.write(header_file)
f.close()

# Construct code for implementation file
impl_file = "/** THIS IS AN AUTOGENERATED FILE **/\n"
impl_file += "#include \"state_history_holder.hpp\"\n\n"
impl_file += "namespace StateHistory {\n"

for group in history_groups:
    namespace = "namespace {0} {{\n".format(group["fqn"])
    for field in definitions[group["fqn"]]:
        namespace += "  {0}\n".format(field)
    namespace += "  rwmutex_t {0}_state_lock;\n".format(group["nickname"])
    namespace += "}\n"
    impl_file += namespace

impl_file += "}"
f = open("../../../state/state_history_holder.cpp", "w")
f.write(impl_file)
f.close()