/** THIS IS AN AUTOGENERATED FILE **/

#include "downlink_serializer.hpp"
#include "../state/state_holder.hpp"
#include "../state/state_history_holder.hpp"
#include <comms_utils.hpp>

{% for p_no in range(num_packets) %}
static void serialize_packet_{{p_no}}(std::bitset<Comms::PACKET_SIZE_BITS> &packet, unsigned int downlink_no) {
  unsigned int packet_ptr = 0;

  std::bitset<32> downlink_num_repr(downlink_no);
  for(int i = 0; i < 32; i++) packet.set(packet_ptr++, downlink_num_repr[i]);
  std::bitset<8> packet_num_repr(0);
  for(int i = 0; i < 8; i++) packet.set(packet_ptr++, packet_num_repr[i]);

  {% for field in p.fields %}
  std::bitset<{{field.size}}> bitset_{{loop.index}};
  {{ field.serializer_line }}
  for(int i = 0; i < bitset_{{loop.index}}.size(); i++) packet.set(packet_ptr++,bitset_{{loop.index}}[i]);
  {% endfor %}
}
{% endfor %}

void Comms::serialize_downlink(std::bitset<Comms::PACKET_SIZE_BITS> (&packets)[Comms::NUM_PACKETS], unsigned int downlink_no) {
{% for p_no in range(num_packets) %}
  serialize_packet_{{p_no}}(packets[{{p_no}}], downlink_no);
{% endfor %}
}
