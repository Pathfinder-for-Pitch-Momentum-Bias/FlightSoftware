import math
import csv

with open('uplink_fields.csv') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    header = next(csv_reader)
    FIELDS = [dict(zip(header, map(str, row))) for row in csv_reader]

for field in FIELDS:
    field["size"] = int(field['size'])

TYPES = [
    "bool", "int", "state int", "float vector", "double vector", "quaternion",
    "gps time"
]

impl_file = "/** THIS IS AN AUTOGENERATED FILE **/\n"
impl_file += "#include \"uplink_deserializer.hpp\"\n"
impl_file += "#include <comms_utils.hpp>\n\n"
impl_file += "void Comms::deserialize_uplink(const std::bitset<Comms::UPLINK_SIZE_BITS>& mes, Comms::Uplink* uplink) {\n"
impl_file += "  unsigned int bitset_ptr = 0;\n"

field_counter = 0
for field in FIELDS:
    impl_file += "  std::bitset<{0}> bitset_{1};\n".format(field["size"], field_counter)
    impl_file += "  for(int i = 0; i < {0}; i++) bitset_{1}.set(i, mes[bitset_ptr++]);\n".format(field["size"], field_counter)
    
    if field["type"] == "bool":
        impl_file += "  uplink->{0} = bitset_{1}[0];\n".format(field["name"], field_counter)
    elif field["type"] == "int" or field["type"] == "state int":
        impl_file += "  uplink->{0} = Comms::expand_int(bitset_{1}, {2}, {3});\n".format(field["name"], field_counter, field["min"], field["max"])
    elif field["type"] == "float vector" or field["type"] == "double vector":
        impl_file += "  Comms::expand_vector(bitset_{0}, {1}, {2}, &(uplink->{3}));\n".format(field_counter, field["min"], field["max"], field["name"])
    elif field["type"] == "gps time":
        impl_file += "  Comms::expand_gps_time(bitset_{0}, &(uplink->{1}));\n".format(field_counter, field["name"])
    elif field["type"] == "quaternion":
        impl_file += "  Comms::expand_quaternion(bitset_{0}, &(uplink->{1}));\n".format(field_counter, field["name"])
    else:
        print "Undefined type for field {0}".format(field["name"])
        field_counter += 1
        continue
    
    impl_file += "\n"
    field_counter += 1

impl_file += "}"

f = open("../uplink_deserializer.cpp", "w")
f.write(impl_file)
f.close()