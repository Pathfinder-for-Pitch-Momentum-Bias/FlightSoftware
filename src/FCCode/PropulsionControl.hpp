/**
 * @file PropulsionStateMachine.hpp
 * @author Tanishq Aggarwal (ta335@cornell.edu)
 * @date 2019-06-28
 */

#ifndef PROPULSION_CONTROL_HPP_
#define PROPULSION_CONTROL_HPP_

#include "StateField.hpp"
#include "StateFieldRegistry.hpp"
#include "StateMachine.hpp"
#include "types.hpp"

constexpr size_t num_prop_states = 6;  // TODO move to an autogenerated file

/**
 * @brief Propulsion state machine.
 *
 */
class PropulsionControl : public StateMachine<num_prop_states> {
    protected:
      std::shared_ptr<ReadableStateFieldBase> tank_inner_temperature_ptr;
      std::shared_ptr<ReadableStateFieldBase> tank_outer_temperature_ptr;
      std::shared_ptr<ReadableStateFieldBase> tank_pressure_ptr;
      std::shared_ptr<WritableStateFieldBase> firing_time_ptr;
      std::shared_ptr<WritableStateFieldBase> firing_vector_ptr;

      WritableStateField<bool, bool, SerializerConstants::bool_sz> intertank_valve;

   private:
    // Prevent multiple copies of this class, and provide a constructor for
    // internal use.
    SINGLETON(PropulsionControl);
    PropulsionControl(const std::shared_ptr<StateFieldRegistry> &_registry_ptr,
                      const std::shared_ptr<ReadableStateFieldBase> &_tank_inner_temperature_ptr,
                      const std::shared_ptr<ReadableStateFieldBase> &_tank_outer_temperature_ptr,
                      const std::shared_ptr<ReadableStateFieldBase> &_tank_pressure_ptr,
                      const std::shared_ptr<WritableStateFieldBase> &_firing_time_ptr,
                      const std::shared_ptr<WritableStateFieldBase> &_firing_vector_ptr);

    // TODO add propulsion devices (SpikeAndHold).

   public:
    /**
     * @brief Constants for use within the sanity check functions.
     */
    static constexpr float max_impulse = 20.0f;
    static constexpr size_t prop_firing_sz = 2;    // TODO move to an autogenerated file
    static constexpr size_t tank_pressure_sz = 2;  // TODO move to an autogenerated file

    bool init(unsigned int initial_state);

    static std::unique_ptr<PropulsionControl> create(
        const std::shared_ptr<StateFieldRegistry> &_registry_ptr,
        const std::shared_ptr<ReadableStateFieldBase> &_tank_inner_temperature_ptr,
        const std::shared_ptr<ReadableStateFieldBase> &_tank_outer_temperature_ptr,
        const std::shared_ptr<ReadableStateFieldBase> &_tank_pressure_ptr,
        const std::shared_ptr<WritableStateFieldBase> &firing_time_ptr,
        const std::shared_ptr<WritableStateFieldBase> &firing_vector_ptr);
};

#endif
