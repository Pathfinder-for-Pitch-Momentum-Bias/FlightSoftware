import os, csv

flows = ["flow_data", "startup_flows", "detumble_flows", "close_approach_flows",
         "docking_docked_flows"]
         
class FlowListParser(object):
    def __init__(self, inputFile):
        with open(inputFile, "r") as csvfile:
            self.data_list = list(csv.reader(csvfile, delimiter = ','))

    def parse(self):
        data = []
        for row_data in self.data_list:
            if row_data[1].lower() not in ["true", "false"]:
                # This is just an annotation/comment row, ignore it.
                continue

            reformatted_row_data = [len(data) + 1, row_data[1].lower(), [item for item in row_data[2:] if item != ""]] # Flow ID, flow active/inactive, flow fields
            parsed_row = str(reformatted_row_data).replace("[", "{").replace("]", "}").replace("'", "\"")
            parsed_row = parsed_row.replace("\"true\"", "true").replace("\"false\"", "false")
            data.append(parsed_row)

        return ",\n".join(data)

end = \
"""
};
"""

for flow in flows: 
    preamble = \
    """
    /**
    * WARNING: THIS FILE IS AUTOGENERATED. ALL CHANGES WILL BE OVERWRITTEN.
    */

    #include "flow_data.hpp"

    const std::vector<DownlinkProducer::FlowData> PAN::"""+flow+"""= {
    """
    preamble = preamble[1:]
    
    with open("src/flow_data_cpp/" + flow + ".cpp", "w") as output_f:
        output_f.write(preamble)

        parsed_flow_list = FlowListParser("src/flow_data_csv/"+ flow + ".csv").parse()
        output_f.write(parsed_flow_list)

        output_f.write(end)
