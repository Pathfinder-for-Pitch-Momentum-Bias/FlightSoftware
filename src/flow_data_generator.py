import os, csv, sys

preamble = \
"""
/**
 * WARNING: THIS FILE IS AUTOGENERATED. ALL CHANGES WILL BE OVERWRITTEN.
 */

#include "flow_data.hpp"

namespace PAN
{
const std::vector<FlowData> flow_data = {
"""
preamble = preamble[1:]

class FlowListParser(object):
    def __init__(self, inputFile):
        with open(inputFile, "r") as csvfile:
            self.data_list = list(csv.reader(csvfile, delimiter = ','))

    def parse(self):
        data = []
        for row_data in self.data_list:
            if row_data[1].lower() not in ["true", "false"]:
                # This is just an annotation/comment row, ignore it.
                continue

            reformatted_row_data = [len(data) + 1, row_data[1].lower(), [item for item in row_data[2:] if item != ""]] # Flow ID, flow active/inactive, flow fields
            parsed_row = str(reformatted_row_data).replace("[", "{").replace("]", "}").replace("'", "\"")
            parsed_row = parsed_row.replace("\"true\"", "true").replace("\"false\"", "false")
            data.append(parsed_row)

        return ",\n".join(data)

end = \
"""
};
} // namespace PAN

"""

# If running with Bazel, it supplies the input and output paths
if len(sys.argv) > 2:
    flow_data_input = sys.argv[1]
    flow_data_output = sys.argv[2]
else:
    flow_data_input = "src/flow_data.csv"
    flow_data_output = "src/flow_data.cpp"

with open(flow_data_output, "w+") as output_f:
    output_f.write(preamble)

    parsed_flow_list = FlowListParser(flow_data_input).parse()
    output_f.write(parsed_flow_list)

    output_f.write(end)
